services:
  # Databases
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce-postgres
    environment:
      POSTGRES_DB: ecommerce
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init_fixed.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:7-jammy
    container_name: ecommerce-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - ecommerce-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    container_name: ecommerce-api-gateway
    environment:
      - NODE_ENV=development
      - PORT=8000
      - POSTGRES_URL=postgresql://postgres:password@postgres:5432/ecommerce
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key
      - AUTH_SERVICE_URL=http://auth-svc:10000
      - USER_SERVICE_URL=http://user-svc:10000
      - CATALOG_SERVICE_URL=http://catalog-svc:11000
      - CART_SERVICE_URL=http://cart-svc:12000
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network

  # Auth Service
  auth-svc:
    build:
      context: .
      dockerfile: services/auth-svc/Dockerfile
    container_name: ecommerce-auth-svc
    environment:
      - NODE_ENV=development
      - PORT=10000
      - POSTGRES_URL=postgresql://postgres:password@postgres:5432/ecommerce
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key
      - JWT_REFRESH_SECRET=your-super-secret-refresh-key
    ports:
      - "10000:10000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network

  # User Service
  user-svc:
    build:
      context: .
      dockerfile: services/user-svc/Dockerfile
    container_name: ecommerce-user-svc
    environment:
      - NODE_ENV=development
      - PORT=10000
      - POSTGRES_URL=postgresql://postgres:password@postgres:5432/ecommerce
      - REDIS_URL=redis://redis:6379
    ports:
      - "10001:10000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network

  # Catalog Service
  catalog-svc:
    build:
      context: .
      dockerfile: services/catalog-svc/Dockerfile
    container_name: ecommerce-catalog-svc
    environment:
      - NODE_ENV=development
      - PORT=11000
      - MONGODB_URL=mongodb://mongodb:27017/ecommerce
      - REDIS_URL=redis://redis:6379
    ports:
      - "11000:11000"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network

  # Cart Service
  cart-svc:
    build:
      context: .
      dockerfile: services/cart-svc/Dockerfile
    container_name: ecommerce-cart-svc
    environment:
      - NODE_ENV=development
      - PORT=12000
      - MONGODB_URL=mongodb://mongodb:27017/ecommerce
      - REDIS_URL=redis://redis:6379
    ports:
      - "12000:12000"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: ecommerce-frontend/Dockerfile
    container_name: ecommerce-frontend
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_AUTH_SERVICE=http://localhost:10000
      - NEXT_PUBLIC_CATALOG_SERVICE=http://localhost:11000
      - NEXT_PUBLIC_CART_SERVICE=http://localhost:12000
      - NEXT_PUBLIC_USER_SERVICE=http://localhost:10001
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
      - auth-svc
      - catalog-svc
      - cart-svc
    networks:
      - ecommerce-network

networks:
  ecommerce-network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
